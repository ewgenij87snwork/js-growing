[
{
	"id": "1",
	"name": "varLet",
	"title": "Var, let, const",
	"explain": "Объявление через let и const имеют ограниченную блоком область видимости. Область видимости var -- в пределах функции. let не позволит объявить второй раз туже перменную. const не позволит изменить переменную. Но объявленный через const объект или массив можно извенить",
	"example": [
      "function myFunction() {\n  let myVar = \"Nick\";\n  if (true) {\n    let myVar = \"John\";\n    console.log(myVar); // \"John\"\n    // myVar имеет блочную область видимости, поэтому мы задали новое значение\n    // оно не доступно вне области и не зависит от предыдущего значения myVar\n  }\n  console.log(myVar); // команды блока if НЕ влияют на \"Nick\"\n}\n//console.log(myVar); // выведет ReferenceError, myVar не доступна вне функции",
      "const person = {\n  name: 'Nick'\n};\nperson.name = 'John' // будет работать, поскольку значение изменили, а не присвоили заново\nconsole.log(person.name) // \"John\"\n\nperson.name = 'Johnina'\n\nperson.name = 'Johninininina'\nvar result = person.name ;\n\n document.getElementById(this.name).textContent = JSON.stringify(result);"
    ],
	"sprout": {
		"concept": "переменную объявленную через <strong>var</strong>, то она изменяется повсеместно в пределах функции, елси переменная объявлена через <strong>let</strong>, то она изменится только в пределах \"блока\"",
		"code": "const person = {\n  name: 'Nick'\n};\nperson.name = 'John' // будет работать, поскольку значение изменили, а не присвоили заново\nconsole.log(person.name) // \"John\"\n\nperson.name = 'Johnina'\n\nperson.name = 'Johninininina'\nvar result = person.name ;\n\n document.getElementById(this.name).textContent = JSON.stringify(result);"
	}
},
{
	"id": "2",
	"name": "arrwfnct",
	"title": "Стрелочные функции",
	"explain": "Краткость, объект, отсутствие аргументов, один аргумент, this.",
	"example": "",
	"sprout": {
		"concept": "переменную объявленную через <strong>var</strong>, то она изменяется повсеместно в пределах функции, елси переменная объявлена через <strong>let</strong>, то она изменится только в пределах \"блока\"",
		"code": "var myHonda = { color: 'красный', wheels: 4, engine: { cylinders: 4, size: 2.2 } };\nvar myCar = [myHonda, 2, 'в хорошем состоянии', 'приобретена в 1997'];\nvar newCar = myCar.slice(0, 2);\n\n// Изменяем цвет myHonda.\nmyHonda.color = 'багровый';"
	}
},
{
	"id": "3",
	"name": "fnctdefparam",
	"title": "Параметры функции по умолчанию",
	"explain": "",
	"example": "",
	"sprout": {
		"concept": "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Id itaque necessitatibus aut temporibus voluptas iste numquam mollitia sint harum possimus!",
		"code": "function myFunc(x = 10) {\n  return x;\n}\nconsole.log(myFunc()) // 10 — не задано значение, поэтому значение x по умолчанию присвоено x в функции myFunc\nconsole.log(myFunc(5)) // 5 — значение задано, поэтому x=5 в функции myFunc\n\nconsole.log(myFunc(undefined)) // 10 — задано значение undefined, поэтому по умолчанию равно x\nconsole.log(myFunc(null)); // null — величина задана, продолжение ниже\nvar result = myFunc();\n\n document.getElementById(this.name).textContent = JSON.stringify(result);"
	}
},
{
	"id": "4",
	"name": "dstrctrobjarrs",
	"title": "Деструктурирование объектов и массивов",
	"explain": "",
	"example": ["const person = {\n  firstName: \"Nick\",\n  lastName: \"Anderson\",\n  age: 35,\n  sex: \"M\"\n};\n\nconst { firstName: first, age, city = \"Paris\" } = person; // так выглядит деструктурирование одной строкой\n\nvar result = first;\n\n document.getElementById(this.name).textContent = JSON.stringify(result);"],
	"sprout": {
		"concept": "",
		"code": ""
	}
},
{
	"id": "5",
	"name": "arrmthdsmapfltrrdc",
	"title": "Методы массивов map/filter/reduce",
	"explain": "Итак, let",
	"example": [
		"const numbers = [0, 1, 2, 3, 4, 5, 6];",
		"const person = {\n  name: 'Nick'\n};\nperson.name = 'John' // будет работать, поскольку значение изменили, а не присвоили заново\nconsole.log(person.name) // \"John\"\n\nperson.name = 'Johnina'\n\nperson.name = 'Johninininina'\nvar result = person.name ;\n\n document.getElementById(this.name).textContent = JSON.stringify(result);"
	],
	"sprout": {
		"concept": "переменную объявленную через <strong>var</strong>, то она изменяется повсеместно в пределах функции, елси переменная объявлена через <strong>let</strong>, то она изменится только в пределах \"блока\"",
		"code": "const person = {\n  name: 'Nick'\n};\nperson.name = 'John' // будет работать, поскольку значение изменили, а не присвоили заново\nconsole.log(person.name) // \"John\"\n\nperson.name = 'Johnina'\n\nperson.name = 'Johninininina'\nvar result = person.name ;\n\n document.getElementById(this.name).textContent = JSON.stringify(result);"
	}
},
{
	"id": "6",
	"name": "sprdoprtr",
	"title": "Оператор spread(…)",
	"explain": "чтобы элементы итерации (например массива) можно было использовать в качестве нескольких элементов в коде.",
	"example": [
		"const arr1 = [\"a\", \"b\", \"c\"];\nconst arr2 = [...arr1, \"d\", \"e\", \"f\"]; var result = arr2 ;\n\n document.getElementById(this.name).textContent = JSON.stringify(result);",
		"const myObj = { x: 1, y: 2, a: 3, b: 4 };\nconst { x, y, ...z } = myObj; // деструктурируем объект\nconsole.log(x); // 1\nconsole.log(y); // 2\nconsole.log(z); // { a: 3, b: 4 }\n\n// z — оставшаяся часть деструктурированного объекта myObj после вычитания свойств x и y\n\nconst n = { x, y, ...z }; \nvar result = n;\n\n document.getElementById(this.name).textContent = JSON.stringify(result);"
	],
	"sprout": {
		"concept": "",
		"code": ""
	}
},
{
	"id": "7",
	"name": "objprptshrthnd",
	"title": "Сокращение свойств объекта",
	"explain": "Переменная для свойств объекта",
	"example": [
		"const x = 10;\nconst y = 20;\n\nconst myObj = {\n  x,\n  y\n};\nvar result = myObj.y;\n\n document.getElementById(this.name).textContent = JSON.stringify(result);"
	],
	"sprout": {
		"concept": "",
		"code": ""
	}
},
{
	"id": "8",
	"name": "prmssobj",
	"title": "Объекты «промисы»",
	"explain": "",
	"example": [
		"new Promise(function(resolve, reject) {\n  console.log('A');\n  resolve();\n}).then(function() {\n  console.log('B');\n});\nconsole.log('C'); //Ответ: A, C, затем B.\n var result = '///' ;\n\n document.getElementById(this.name).textContent = JSON.stringify(result);"
	],
	"sprout": {
		"concept": "",
		"code": ""
	}
}
]